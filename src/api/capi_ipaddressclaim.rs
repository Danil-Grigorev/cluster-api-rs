// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --smart-derive-elision -D Default -D PartialEq -A -d -f -
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    #[cfg(feature = "kube-derive")]
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
}
use self::prelude::*;

/// spec is the desired state of IPAddressClaim.
#[cfg_attr(feature = "kube-derive",
    derive(CustomResource),
    kube(group = "ipam.cluster.x-k8s.io", version = "v1beta1", kind = "IPAddressClaim", plural = "ipaddressclaims"),
    kube(namespaced),
    kube(status = "IPAddressClaimStatus"),
    kube(derive = "Default"),
    kube(derive = "PartialEq")
)]
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq, JsonSchema)]
pub struct IPAddressClaimSpec {
    /// clusterName is the name of the Cluster this object belongs to.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "clusterName"
    )]
    pub cluster_name: Option<String>,
    /// poolRef is a reference to the pool from which an IP address should be created.
    #[serde(rename = "poolRef")]
    pub pool_ref: IPAddressClaimPoolRef,
}

/// poolRef is a reference to the pool from which an IP address should be created.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq, JsonSchema)]
pub struct IPAddressClaimPoolRef {
    /// APIGroup is the group for the resource being referenced.
    /// If APIGroup is not specified, the specified Kind must be in the core API group.
    /// For any other third-party types, APIGroup is required.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiGroup")]
    pub api_group: Option<String>,
    /// Kind is the type of resource being referenced
    pub kind: String,
    /// Name is the name of resource being referenced
    pub name: String,
}

/// status is the observed state of IPAddressClaim.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq, JsonSchema)]
pub struct IPAddressClaimStatus {
    /// addressRef is a reference to the address that was created for this claim.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "addressRef"
    )]
    pub address_ref: Option<IPAddressClaimStatusAddressRef>,
    /// conditions summarises the current state of the IPAddressClaim
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// v1beta2 groups all the fields that will be added or modified in IPAddressClaim's status with the V1Beta2 version.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub v1beta2: Option<IPAddressClaimStatusV1beta2>,
}

/// addressRef is a reference to the address that was created for this claim.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq, JsonSchema)]
pub struct IPAddressClaimStatusAddressRef {
    /// Name of the referent.
    /// This field is effectively required, but due to backwards compatibility is
    /// allowed to be empty. Instances of this type with an empty value here are
    /// almost certainly wrong.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// v1beta2 groups all the fields that will be added or modified in IPAddressClaim's status with the V1Beta2 version.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq, JsonSchema)]
pub struct IPAddressClaimStatusV1beta2 {
    /// conditions represents the observations of a IPAddressClaim's current state.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
}
